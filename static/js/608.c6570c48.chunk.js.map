{"version":3,"file":"static/js/608.c6570c48.chunk.js","mappings":"qjBAMqBA,EAAAA,SAAAA,I,6BAanB,WAAYC,EAA2BC,GAAgB,MA4O7BC,EA1OxB,IAFqD,gBACrD,gBADqCD,SAAAA,EAV/B,EAAAE,WAA+B,KAC/B,EAAAC,OAAwB,KACxB,EAAAC,eAAgB,EAChB,EAAAC,eAAiB,EACjB,EAAAC,cAAe,EACf,EAAAC,kBAGJ,IAAIC,IAmBR,EAAAC,cAAgB,SACdC,G,MAWA,GACG,EAAKC,mBAAqBD,EAAEE,SAAWC,QACvCH,EAAEI,UAA4B,QAAjB,IAAKC,oBAAYC,IAAAA,OAAA,EAAAA,EAAEF,SAAUJ,EAAEE,SAAW,EAAKT,OAE7D,GAAsB,cAAlBO,EAAEO,KAAKC,OAAwB,CACjC,IAAMC,EAAe,IAAIC,EAAAA,UAAUV,EAAEO,KAAKI,OAAOC,WAC5C,EAAKpB,YAAe,EAAKA,WAAWqB,OAAOJ,KAC1C,EAAKjB,aAAe,EAAKA,WAAWqB,OAAOJ,IAC7C,EAAKK,mBAEP,EAAKtB,WAAaiB,EAClB,EAAKb,eAAiBI,EAAEO,KAAKI,OAAOI,YACpC,EAAKC,KAAK,UAAW,EAAKxB,kBAEvB,GAAsB,iBAAlBQ,EAAEO,KAAKC,OAChB,EAAKM,wBACA,GAAId,EAAEO,KAAKU,QAAUjB,EAAEO,KAAKW,MAAO,CACxC,IAAMC,EAAW,EAAKtB,kBAAkBuB,IAAIpB,EAAEO,KAAKc,IACnD,GAAIF,EAAU,CACZ,cAA0BA,EAA1B,GAAOG,EAAP,KAAgBC,EAAhB,KACIvB,EAAEO,KAAKU,OACTK,EAAQtB,EAAEO,KAAKU,QAEfM,EAAO,IAAIC,MAAMxB,EAAEO,KAAKW,WAgH1B,EAAAO,cAAgB,WACjB,EAAKC,cA6Ed,SAAkBnC,GAChB,MAAoB,kBAANA,GAAwB,OAANA,EAL9BoC,CAFwBpC,EA1ODF,IA4OR,gBAAiBE,GAA8B,oBAAlBA,EAAEqC,YA3O5C,EAAK3B,kBAAoBZ,MACpB,KAoOX,SAAkBE,GAChB,MAAoB,kBAANA,EArODsC,CAASxC,GAOlB,MAAM,IAAImC,MACR,oEAPF,EAAKnB,aAAe,IAAIyB,IAAIzC,GAC5B,EAAKgB,aAAa0B,KAAO,IAAIC,gBAAgB,CAC3C5B,OAAQD,OAAO8B,SAAS7B,OACxB8B,QAAS,EAAK5C,WACb6C,WATgD,S,4CA2D/C,WAAa,I,EAAA,OAMnB,OALKC,KAAK1C,gBACR0C,KAAK1C,eAAgB,EACrBS,OAAOkC,iBAAiB,UAAWD,KAAKrC,eACxCI,OAAOkC,iBAAiB,eAAgBD,KAAKX,gBAE3CW,KAAKnC,kBACA,IAAIqC,SAAc,SAAChB,GACnB,EAAKiB,YAAY,UAAW,IACjCjB,QAGFnB,OAAOqC,KAAO,SACdJ,KAAK3C,OAASU,OAAOsC,KACF,QAAjB,EAAAL,KAAK/B,oBAAYC,IAAAA,OAAA,EAAAA,EAAE6B,WACnB,SACA,2CAEK,IAAIG,SAAQ,SAAChB,GAClB,EAAKoB,KAAK,UAAWpB,S,8BAKnB,WAAgB,WAClBc,KAAK1C,gBACP0C,KAAK1C,eAAgB,EACrBS,OAAOwC,oBAAoB,UAAWP,KAAKrC,eAC3CI,OAAOwC,oBAAoB,eAAgBP,KAAKX,gBAE9CW,KAAK5C,aACP4C,KAAK5C,WAAa,KAClB4C,KAAKpB,KAAK,eAEZoB,KAAKvC,kBAAkB+C,SAAQ,WAAavB,GAAM,IAAfE,GAAe,eAChD,EAAK1B,kBAAkBgD,OAAOxB,GAC9BE,EAAO,IAAIC,MAAM,6B,yBAIP,SAAYhB,EAAgBG,G,oIACzB,YAAXH,GAAyB4B,KAAKU,UAAAA,C,qBAC1B,IAAItB,MAAM,wB,cAEZuB,EAAYX,KAAKzC,iBACrByC,KAAKzC,e,kBACA,IAAI2C,SAAQ,SAAChB,EAASC,G,YAC3B,EAAK1B,kBAAkBmD,IAAID,EAAW,CAACzB,EAASC,IAC5C,EAAKtB,kBACP,EAAKA,kBAAkB2B,YAAY,CACjCqB,QAAS,MACT5B,GAAI0B,EACJvC,OAAAA,EACAG,OAAQ,OAAF,QACJuB,QAAS,EAAK5C,UACXqB,MAII,QAAX,IAAKlB,cAAMa,IAAAA,GAAAA,EAAEsB,YACX,CACEqB,QAAS,MACT5B,GAAI0B,EACJvC,OAAAA,EACAG,OAAAA,GAEuB,QAAzB,EAAiB,QAAjB,IAAKN,oBAAY6C,IAAAA,OAAA,EAAAA,EAAE9C,cAAM+C,IAAAA,EAAAA,EAAI,IAG1B,EAAKpC,aACG,QAAX,IAAKtB,cAAM2D,IAAAA,GAAAA,EAAEC,a,uEAMrB,WACE,OAAOjB,KAAK5C,a,qBAGd,WACE,OAA2B,OAApB4C,KAAK5C,a,uBAGd,WACE,OAAO4C,KAAKxC,e,qBAGR,W,oHAIJ,OAHIwC,KAAK3C,QACP2C,KAAK3C,OAAO6D,Q,SAERlB,KAAKmB,gB,0EAGP,W,wHACAnB,KAAKnC,kBAAmB,C,eAC1B,O,SAAMmC,KAAKG,YAAY,aAAc,I,OAEnCH,KAAK3C,QACP2C,KAAK3C,OAAO6D,QAEdlB,KAAKtB,mB,oEAOD,SACJP,EACAiD,G,iIAKMjD,aAAgBkD,WAAAA,C,qBACd,IAAIjC,MAAM,0C,OAGA,O,SAAMY,KAAKG,YAAY,OAAQ,CAC/ChC,KAAAA,EACAiD,QAAAA,I,cAFIE,EAAAA,EAAAA,KAIAC,EAAYC,IAAAA,OAAYF,EAASC,WACjC/C,EAAY,IAAIF,EAAAA,UAAUgD,EAAS9C,W,kBAClC,CACL+C,UAAAA,EACA/C,UAAAA,I,+EAIE,SAAgBiD,G,8HACF,O,SAAMzB,KAAKG,YAAY,kBAAmB,CAC1DuB,QAASF,IAAAA,OAAYC,EAAYE,sB,cAD7BL,EAAAA,EAAAA,KAGAC,EAAYC,IAAAA,OAAYF,EAASC,WACjC/C,EAAY,IAAIF,EAAAA,UAAUgD,EAAS9C,WACzCiD,EAAYG,aAAapD,EAAW+C,G,kBAC7BE,G,mFAGH,SACJI,G,8HAEkB,O,SAAM7B,KAAKG,YAAY,sBAAuB,CAC9D2B,SAAUD,EAAaE,KAAI,SAACC,GAAD,OAAQR,IAAAA,OAAYQ,EAAGL,yB,cAD9CL,EAAAA,EAAAA,KAGAW,EAAaX,EAASW,WAAWF,KAAI,SAACG,GAAD,OAAOV,IAAAA,OAAYU,MACxD1D,EAAY,IAAIF,EAAAA,UAAUgD,EAAS9C,WACzCqD,EAAeA,EAAaE,KAAI,SAACC,EAAIG,GAEnC,OADAH,EAAGJ,aAAapD,EAAWyD,EAAWE,IAC/BH,K,kBAEFH,G,6EAGH,SACJrD,G,6HAEMA,aAAqB6C,WAAAA,C,qBACnB,IAAIjC,MAAM,0C,OAEA,O,SAAMY,KAAKG,YAAY,gBAAiB,CACxD3B,UAAAA,I,cADI8C,EAAAA,EAAAA,K,kBAMCA,G,sDAjPUtE,CAAeoF","sources":["../node_modules/@project-serum/sol-wallet-adapter/src/index.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\n\ntype InjectedProvider = { postMessage: (params: unknown) => void };\n\nexport default class Wallet extends EventEmitter {\n  private _providerUrl: URL | undefined;\n  private _injectedProvider?: InjectedProvider;\n  private _publicKey: PublicKey | null = null;\n  private _popup: Window | null = null;\n  private _handlerAdded = false;\n  private _nextRequestId = 1;\n  private _autoApprove = false;\n  private _responsePromises: Map<\n    number,\n    [(value: string) => void, (reason: Error) => void]\n  > = new Map();\n\n  constructor(provider: unknown, private _network: string) {\n    super();\n    if (isInjectedProvider(provider)) {\n      this._injectedProvider = provider;\n    } else if (isString(provider)) {\n      this._providerUrl = new URL(provider);\n      this._providerUrl.hash = new URLSearchParams({\n        origin: window.location.origin,\n        network: this._network,\n      }).toString();\n    } else {\n      throw new Error(\n        'provider parameter must be an injected provider or a URL string.',\n      );\n    }\n  }\n\n  handleMessage = (\n    e: MessageEvent<{\n      id: number;\n      method: string;\n      params: {\n        autoApprove: boolean;\n        publicKey: string;\n      };\n      result?: string;\n      error?: string;\n    }>,\n  ): void => {\n    if (\n      (this._injectedProvider && e.source === window) ||\n      (e.origin === this._providerUrl?.origin && e.source === this._popup)\n    ) {\n      if (e.data.method === 'connected') {\n        const newPublicKey = new PublicKey(e.data.params.publicKey);\n        if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n          if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n            this.handleDisconnect();\n          }\n          this._publicKey = newPublicKey;\n          this._autoApprove = !!e.data.params.autoApprove;\n          this.emit('connect', this._publicKey);\n        }\n      } else if (e.data.method === 'disconnected') {\n        this.handleDisconnect();\n      } else if (e.data.result || e.data.error) {\n        const promises = this._responsePromises.get(e.data.id);\n        if (promises) {\n          const [resolve, reject] = promises;\n          if (e.data.result) {\n            resolve(e.data.result);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        }\n      }\n    }\n  };\n\n  private handleConnect() {\n    if (!this._handlerAdded) {\n      this._handlerAdded = true;\n      window.addEventListener('message', this.handleMessage);\n      window.addEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._injectedProvider) {\n      return new Promise<void>((resolve) => {\n        void this.sendRequest('connect', {});\n        resolve();\n      });\n    } else {\n      window.name = 'parent';\n      this._popup = window.open(\n        this._providerUrl?.toString(),\n        '_blank',\n        'location,resizable,width=460,height=675',\n      );\n      return new Promise((resolve) => {\n        this.once('connect', resolve);\n      });\n    }\n  }\n\n  private handleDisconnect() {\n    if (this._handlerAdded) {\n      this._handlerAdded = false;\n      window.removeEventListener('message', this.handleMessage);\n      window.removeEventListener('beforeunload', this._beforeUnload);\n    }\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit('disconnect');\n    }\n    this._responsePromises.forEach(([, reject], id) => {\n      this._responsePromises.delete(id);\n      reject(new Error('Wallet disconnected'));\n    });\n  }\n\n  private async sendRequest(method: string, params: Record<string, unknown>) {\n    if (method !== 'connect' && !this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    const requestId = this._nextRequestId;\n    ++this._nextRequestId;\n    return new Promise((resolve, reject) => {\n      this._responsePromises.set(requestId, [resolve, reject]);\n      if (this._injectedProvider) {\n        this._injectedProvider.postMessage({\n          jsonrpc: '2.0',\n          id: requestId,\n          method,\n          params: {\n            network: this._network,\n            ...params,\n          },\n        });\n      } else {\n        this._popup?.postMessage(\n          {\n            jsonrpc: '2.0',\n            id: requestId,\n            method,\n            params,\n          },\n          this._providerUrl?.origin ?? '',\n        );\n\n        if (!this.autoApprove) {\n          this._popup?.focus();\n        }\n      }\n    });\n  }\n\n  get publicKey(): PublicKey | null {\n    return this._publicKey;\n  }\n\n  get connected(): boolean {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove(): boolean {\n    return this._autoApprove;\n  }\n\n  async connect(): Promise<void> {\n    if (this._popup) {\n      this._popup.close();\n    }\n    await this.handleConnect();\n  }\n\n  async disconnect(): Promise<void> {\n    if (this._injectedProvider) {\n      await this.sendRequest('disconnect', {});\n    }\n    if (this._popup) {\n      this._popup.close();\n    }\n    this.handleDisconnect();\n  }\n\n  private _beforeUnload = (): void => {\n    void this.disconnect();\n  };\n\n  async sign(\n    data: Uint8Array,\n    display: unknown,\n  ): Promise<{\n    signature: Buffer;\n    publicKey: PublicKey;\n  }> {\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n\n    const response = (await this.sendRequest('sign', {\n      data,\n      display,\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    return {\n      signature,\n      publicKey,\n    };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response = (await this.sendRequest('signTransaction', {\n      message: bs58.encode(transaction.serializeMessage()),\n    })) as { publicKey: string; signature: string };\n    const signature = bs58.decode(response.signature);\n    const publicKey = new PublicKey(response.publicKey);\n    transaction.addSignature(publicKey, signature);\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    const response = (await this.sendRequest('signAllTransactions', {\n      messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n    })) as { publicKey: string; signatures: string[] };\n    const signatures = response.signatures.map((s) => bs58.decode(s));\n    const publicKey = new PublicKey(response.publicKey);\n    transactions = transactions.map((tx, idx) => {\n      tx.addSignature(publicKey, signatures[idx]);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async diffieHellman(\n    publicKey: Uint8Array,\n  ): Promise<{ publicKey: Uint8Array; secretKey: Uint8Array }> {\n    if (!(publicKey instanceof Uint8Array)) {\n      throw new Error('Data must be an instance of Uint8Array');\n    }\n    const response = (await this.sendRequest('diffieHellman', {\n      publicKey,\n    })) as {\n      publicKey: Uint8Array;\n      secretKey: Uint8Array;\n    };\n    return response;\n  }\n}\n\nfunction isString(a: unknown): a is string {\n  return typeof a === 'string';\n}\n\nfunction isInjectedProvider(a: unknown): a is InjectedProvider {\n  return (\n    isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function'\n  );\n}\n\nfunction isObject(a: unknown): a is Record<string, unknown> {\n  return typeof a === 'object' && a !== null;\n}\n"],"names":["Wallet","provider","_network","a","_publicKey","_popup","_handlerAdded","_nextRequestId","_autoApprove","_responsePromises","Map","handleMessage","e","_injectedProvider","source","window","origin","_providerUrl","_a","data","method","newPublicKey","PublicKey","params","publicKey","equals","handleDisconnect","autoApprove","emit","result","error","promises","get","id","resolve","reject","Error","_beforeUnload","disconnect","isObject","postMessage","isString","URL","hash","URLSearchParams","location","network","toString","this","addEventListener","Promise","sendRequest","name","open","once","removeEventListener","forEach","delete","connected","requestId","set","jsonrpc","_b","_c","_d","focus","close","handleConnect","display","Uint8Array","response","signature","bs58","transaction","message","serializeMessage","addSignature","transactions","messages","map","tx","signatures","s","idx","EventEmitter"],"sourceRoot":""}